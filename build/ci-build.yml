name: $(date:yyyyMMdd)$(rev:rr)

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - arcus/*
    - tests/*
    - requirements.txt
    exclude:
    - docs/preview

pr:
  paths:
    include:
    - arcus/*
    - tests/*
    - build/ci-build.yml
    - requirements.txt

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

pool:
  vmImage: 'ubuntu-latest'

steps:
- template: 'pypi/determine-pr-version.yml@templates'
  parameters:
    manualTriggerVersion: preview

# The persistCredentials will leave the OAuth token in the Git config after the initial fetch
- checkout: self
  persistCredentials: true

- script: echo "Source branch is $(System.PullRequest.SourceBranch)"
- script: echo "Name user is $(Build.RequestedFor)"
- script: echo "Email user is $(Build.RequestedForEmail)"

#- script: |
#    git checkout $(System.PullRequest.SourceBranch)
#  displayName: 'Checkout build branch'
  
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.7'
    addToPath: true
    architecture: 'x64'

- task: Bash@3
  displayName: 'Update version number'
  inputs:
    targetType: 'inline'
    script: 'sed -i ''s/1.0.0/$(Package.Version).$(Build.BuildNumber)/g'' arcus/ml/__init__.py'
    failOnStderr: true
    
- script: python -m pip install --upgrade pip setuptools wheel pdoc3 lazydocs
  displayName: 'Install tools'

- script: pip install -r requirements.txt
  displayName: 'Install requirements'

    # git config user.email "$(Build.RequestedForEmail)"
    # git config user.name "$(Build.RequestedFor)"
- script: |
    lazydocs --output-path docs/preview arcus/ml
    #could not read Username for 'https://github.com': terminal prompts disabled
    #git config --global --add url."git@github.com:".insteadOf "https://github.com/"
    git config user.email "sam.vanhoutte@marchitec.be"
    git config user.name "samvanhoutte"
    git add docs/preview
    git commit -m "Add SDK docs from Build $(Build.BuildId) [skip ci]"
    git push origin HEAD:$(System.PullRequest.SourceBranch)
  displayName: 'Generate code documentation'
  continueOnError: false

- script: |
    pip install pytest
    pip install pytest-cov
    pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
  displayName: 'Unit tests (pytest)'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- script: |    
    python setup.py sdist bdist_wheel 
  displayName: 'Build wheels'

- script: python -m pip install --upgrade twine
  displayName: 'Install Twine'

- task: TwineAuthenticate@1
  inputs:
    pythonUploadServiceConnection: 'Arcus ML PyPi feed'

# - script: |
#    pdoc --html --force --config show_source_code=False -o docs/ arcus/ml 
#   displayName: 'Generate code documentation'
#   continueOnError: true

- script: |
   python -m twine upload --skip-existing --verbose -r 'arcus-ml' --config-file $(PYPIRC_PATH) dist/*
  displayName: 'Publish to PyPi dev'
  condition: succeededOrFailed()

- task: CopyFiles@2  
  inputs:    
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1  
  inputs:    
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'                  
    ArtifactName: 'dist'    
    publishLocation: 'Container'
